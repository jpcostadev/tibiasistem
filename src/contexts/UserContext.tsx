import React from "react";
import useFetch from "../hooks/useFetch"; // Importa o hook de busca de dados ass√≠ncrona

// Define o tipo do usu√°rio esperado da API
type User = {
  id: number; // ID do usu√°rio
  nome: string; // Nome do usu√°rio
  idade: number; // Idade do usu√°rio
  aulas: number; // N√∫mero de aulas assistidas
  cursos: number; // N√∫mero de cursos feitos
  preferencias: {
    // Prefer√™ncias do usu√°rio para v√≠deo
    playback: number; // Velocidade de reprodu√ß√£o
    volume: number; // Volume padr√£o
    qualidade: "baixa" | "media" | "alta"; // Qualidade de reprodu√ß√£o
  };
};

// Define o formato do valor que ser√° compartilhado via contexto
type useCont = {
  data: User | null; // Dados do usu√°rio (ou null enquanto carrega)
  loading: boolean; // Indica se os dados est√£o sendo carregados
};

// Cria o contexto com tipo `useCont` ou null como fallback
export const UserContext = React.createContext<useCont | null>(null);

// Hook personalizado para acessar o contexto de forma segura
export const useUser = () => {
  const context = React.useContext(UserContext);
  if (context === null)
    throw new Error("O Contexto deve estar dentro de um provider"); // Garante que seja usado dentro de <UserContextProvider>
  return context;
};

// Provider que envolve os componentes e fornece os dados carregados
export const UserContextProvider = ({ children }: React.PropsWithChildren) => {
  // Usa o hook de fetch tipado com <User> para buscar os dados da API
  const { data, loading } = useFetch<User>(
    "https://data.origamid.dev/usuarios/1",
  );

  return (
    <UserContext.Provider value={{ data, loading }}>
      {children} {/* Renderiza os filhos dentro do Provider */}
    </UserContext.Provider>
  );
};

/*
=================================================================================================
üìò EXPLICA√á√ÉO GERAL ‚Äì CONTEXTO DE USU√ÅRIO COM FETCH TIPADO

üîπ O QUE ESSE ARQUIVO FAZ?
Esse arquivo cria um Contexto React que fornece os dados de um usu√°rio vindos da API
de forma global para a aplica√ß√£o ‚Äî ou seja, qualquer componente pode acessar esses dados
sem precisar fazer o `fetch` de novo.

---------------------------------------------------------------------------------------
üî∂ 1. TYPE `User`
Define a estrutura exata dos dados que a API deve retornar. Isso permite:
- Tipagem est√°tica no TypeScript
- Autocompletar em editores
- Seguran√ßa contra dados faltando ou errados

---------------------------------------------------------------------------------------
üî∂ 2. TYPE `useCont`
Define o formato de valor que o contexto vai expor:
{ data: User | null, loading: boolean }

---------------------------------------------------------------------------------------
üî∂ 3. `UserContext`
Cria o contexto com valor inicial `null`, que depois ser√° preenchido no Provider.

---------------------------------------------------------------------------------------
üî∂ 4. `useUser`
Hook customizado que facilita o uso do contexto nos componentes.
Inclui uma verifica√ß√£o de seguran√ßa para garantir que o hook s√≥ seja usado dentro do provider.

---------------------------------------------------------------------------------------
üî∂ 5. `UserContextProvider`
- Usa o `useFetch<User>()` para buscar os dados da API apenas uma vez.
- Envolve os componentes filhos e fornece `{ data, loading }` como valor do contexto.
- Isso evita m√∫ltiplas requisi√ß√µes e centraliza o estado global do usu√°rio.

---------------------------------------------------------------------------------------
üîπ COMO USAR?
```tsx
import { useUser } from './UserContext';

const Perfil = () => {
  const { data, loading } = useUser();

  if (loading) return <p>Carregando...</p>;
  if (!data) return <p>Usu√°rio n√£o encontrado</p>;

  return <h1>Bem-vindo, {data.nome}</h1>;
};
*/
